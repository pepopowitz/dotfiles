#!/usr/bin/env node
// Open the URL corresponding to the current file in a browser.
// Usage:
//   open-docusaurus filePath projectPath
// Arguments:
//   filePath: The file path to open in a browser.
//   projectPath: The path to the root of the Docusaurus project.
//   host: The host to use for the URL. Default: http://localhost:3000.

const { exec } = require('child_process');
const { readFileSync } = require('fs');

const { filePath, projectPath, host } = getContext();

if (!filePath || !projectPath) {
  console.error(
    'Error: Please provide a file path and project path as arguments.'
  );
  console.error('Usage: open-docusaurus <file-path> <project-path>');
  process.exit(1);
}

openDocInBrowser(filePath, projectPath, host);

function getContext() {
  const filePath = process.argv[2];
  const projectPath = process.argv[3];
  const host = process.argv[4] || 'http://localhost:3000';

  return { filePath, projectPath, host };
}

function openDocInBrowser(filePath, projectPath, host) {
  const urlPath = buildUrlPath(filePath, projectPath);

  const url = `${host}/${urlPath}`;
  console.log('  URL: ', url);
  openUrl(url);
}

function buildUrlPath(filePath, projectPath) {
  const contents = readFileContents(filePath);
  const frontmatter = extractFrontmatter(contents);

  const slug = extractSlugFromFrontmatter(frontmatter);
  const documentId = extractIdFromFrontmatter(frontmatter);
  const fileName = extractFileName(filePath);
  const { urlBasePath, urlDirectory } = findUrlBasePathAndDirectory(
    filePath,
    projectPath
  );

  if (slug) {
    console.log('  URL base path: ', urlBasePath);
    console.log('  Slug: ', slug);
    return `${urlBasePath}/${slug}`;
  }

  if (documentId) {
    console.log('  URL base path: ', urlBasePath);
    console.log('  URL directory: ', urlDirectory);
    console.log('  Document ID: ', documentId);
    return `${urlBasePath}/${urlDirectory}/${documentId}`;
  }

  console.log('  URL base path: ', urlBasePath);
  console.log('  URL directory: ', urlDirectory);
  console.log('  File name: ', fileName);
  return `${urlBasePath}/${urlDirectory}/${fileName}`;
}

function readFileContents(filePath) {
  try {
    return readFileSync(filePath, 'utf8');
  } catch (err) {
    console.error(`Error: Unable to read file ${filePath}.`);
    process.exit(1);
  }
}

function extractFileName(filePath, documentId) {
  //   Gets "example.md" from "/path/to/example.md"
  const fullFileName = filePath.split('/').pop();
  //   Gets "example" from "example.md"
  const fileName = fullFileName.split('.')[0];

  return fileName;
}

function findUrlBasePathAndDirectory(filePath, projectPath) {
  const { currentVersion } = require(`${projectPath}/src/versions`);

  // Different versions match different patterns.
  const pathMappings = [
    {
      pattern: new RegExp(
        `${projectPath}/versioned_docs/version-${currentVersion}/(.*)$`
      ),
      replacement: 'docs',
    },
    {
      pattern: new RegExp(
        `${projectPath}/versioned_docs/version-([^/]+)/(.*)$`
      ),
      replacement: 'docs/$1',
    },
    {
      pattern: new RegExp(`${projectPath}/docs/(.*)$`),
      replacement: 'docs/next',
    },
  ];

  // Try each pattern until we find a match
  for (const mapping of pathMappings) {
    const match = filePath.match(mapping.pattern);
    if (match) {
      // We have a match, apply the replacement
      let urlBasePath = mapping.replacement;

      let urlDirectory = '';
      if (match[2]) {
        // if there are two captures, the first is a version and the second is the directory path + file
        urlDirectory = match[2];
        urlBasePath = urlBasePath.replace('$1', match[1]);
      } else {
        // else the only capture is the directory path + file
        urlDirectory = match[1];
      }

      // Remove file name from URL path
      urlDirectory = urlDirectory.split('/').slice(0, -1).join('/');

      return { urlBasePath, urlDirectory };
    }
  }

  // No match found
  console.error(`Error: Unable to identify URL path of ${filePath}.`);
  process.exit(1);
}

function extractFrontmatter(frontmatter) {
  // Extract frontmatter content between --- markers
  const match = frontmatter.match(/^---\s*$([\s\S]*?)^---\s*$/m);

  // Return the trimmed match value if found, otherwise null
  if (match && match[1]) {
    return match[1].trim();
  }
  return null;
}

function extractSlugFromFrontmatter(frontmatter) {
  // Look for slug: value within the frontmatter
  const match = frontmatter.match(/^slug:\s*(.*)$/m);

  // Return the trimmed match value if found, otherwise null
  if (match && match[1]) {
    // trim the match, and remove leading slash:
    return match[1].trim().replace(/^\//, '');
  }
  return null;
}

function extractIdFromFrontmatter(frontmatter) {
  // Look for id: value within the frontmatter
  const match = frontmatter.match(/^id:\s*(.*)$/m);

  // Return the trimmed match value if found, otherwise null
  if (match && match[1]) {
    return match[1].trim();
  }
  return null;
}

function openUrl(url) {
  // Cross-platform browser opening

  // Linux
  let command = 'xdg-open';
  if (process.platform === 'win32') {
    // Windows
    command = 'start';
  } else if (process.platform === 'darwin') {
    // Mac
    command = 'open';
  }

  exec(`${command} ${url}`);
}
